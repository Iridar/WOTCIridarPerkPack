

XComTemplateCreator.ini
;[WOTCIridarTemplateMaster.X2Item_TemplateCreator]

;+Create_X2ItemTemplate = (C = "X2WeaponTemplate", T = "IRI_BountyPistol_CV")


	Templates.AddItem(IRI_BH_ChasingShot());
	Templates.AddItem(IRI_BH_ChasingShot_Attack());
	Templates.AddItem(IRI_BH_Blindside());
	Templates.AddItem(IRI_BH_Folowthrough());
	Templates.AddItem(IRI_BH_BigGameHunter_Alt());
	Templates.AddItem(IRI_BH_BigGameHunter_Alt_Passive());

static private function X2AbilityTemplate IRI_BH_ChasingShot()
{
	local X2AbilityTemplate		Template;	
	local X2Effect_Persistent	ChasingShotEffect;
	local X2AbilityCost_Ammo	AmmoCost;

	// Macro to do localisation and stuffs
	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_ChasingShot');

	// Icon Setup
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_standardpistol";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	// Targeting and Triggering
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter Conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// Target conditions
	Template.AbilityTargetConditions.AddItem(default.LivingHostileTargetProperty);
	Template.AbilityTargetConditions.AddItem(default.MeleeVisibilityCondition); // visible to any ally

	// Costs
	Template.AbilityCosts.AddItem(default.FreeActionCost);	

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.bFreeCost = true; // Require ammo only for activation
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);
	Template.bUseAmmoAsChargesForHUD = true;

	AddCooldown(Template, `GetConfigInt('IRI_BH_ChasingShot_Cooldown'));

	// Effects
	ChasingShotEffect = new class'X2Effect_Persistent';
	ChasingShotEffect.BuildPersistentEffect(1, false, false, false, eGameRule_PlayerTurnBegin);
	ChasingShotEffect.SetDisplayInfo(ePerkBuff_Penalty, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName); //  Status icon here
	ChasingShotEffect.EffectName = 'IRI_BH_ChasingShot_Effect';
	ChasingShotEffect.DuplicateResponse = eDupe_Allow;
	Template.AddTargetEffect(ChasingShotEffect);

	// State and Viz
	Template.AbilityConfirmSound = "TacticalUI_Activate_Ability_Run_N_Gun";
	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.ConcealmentRule = eConceal_Always;
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;	
	//Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.AdditionalAbilities.AddItem('IRI_BH_ChasingShot_Attack');

	return Template;	
}

static private function X2AbilityTemplate IRI_BH_ChasingShot_Attack()
{
	local X2AbilityTemplate							Template;	
	local X2AbilityTrigger_EventListener			Trigger;
	local X2Condition_UnitEffectsWithAbilitySource	UnitEffectsCondition;
	local X2AbilityCost_Ammo						AmmoCost;

	Template = class'X2Ability_WeaponCommon'.static.Add_PistolStandardShot('IRI_BH_ChasingShot_Attack');

	UnitEffectsCondition = new class'X2Condition_UnitEffectsWithAbilitySource';
	UnitEffectsCondition.AddRequireEffect('IRI_BH_ChasingShot_Effect', 'AA_MissingRequiredEffect');
	Template.AbilityTargetConditions.AddItem(UnitEffectsCondition);

	// Icon
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_standard";
	Template.AbilitySourceName = 'eAbilitySource_Perk';   
	SetHidden(Template);	    

	Template.AbilityTriggers.Length = 0;	
	Trigger = new class'X2AbilityTrigger_EventListener';
	Trigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	Trigger.ListenerData.EventID = 'AbilityActivated';
	Trigger.ListenerData.Filter = eFilter_Unit;
	Trigger.ListenerData.EventFn = ChasingShotTriggerListener;
	Template.AbilityTriggers.AddItem(Trigger);
	
	// Reset costs, keep only ammo cost.
	Template.AbilityCosts.Length = 0;   
	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	Template.bShowActivation = true;
	Template.AssociatedPlayTiming = SPT_AfterSequential;

	return Template;	
}

static private function EventListenerReturn ChasingShotTriggerListener(Object EventData, Object EventSource, XComGameState GameState, Name Event, Object CallbackData)
{
	local XComGameStateContext_Ability	AbilityContext;
	local XComGameState_Unit			UnitState;
	local XComGameState_Ability			ChasingShotState;
	local XComGameState					NewGameState;
	local XComGameStateHistory			History;
	local XComGameState_Effect			EffectState;
	//local XComGameState_Ability			AbilityState;
	//local StateObjectReference			AbilityRef;

	AbilityContext = XComGameStateContext_Ability(GameState.GetContext());
	if (AbilityContext == none) 
		return ELR_NoInterrupt;

	UnitState = XComGameState_Unit(EventSource);
	if (UnitState == none)
		return ELR_NoInterrupt;

	ChasingShotState = XComGameState_Ability(CallbackData);
	if (ChasingShotState == none)
		return ELR_NoInterrupt;

	// If triggered ability involves movement, trigger Chasing Shot attack against first available target when the unit is on the final tile of movement.
	if (AbilityContext.InputContext.MovementPaths.Length > 0 && 
        AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length > 0)
    {
        if (AbilityContext.InputContext.MovementPaths[0].MovementTiles[AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length - 1] == UnitState.TileLocation)
		{
			if (ChasingShotState.AbilityTriggerAgainstTargetIndex(0))
			{
				// After activating the ability, remove the Chasing Shot effect from the target.
				// This needs to be done here so that Chasing Shot can properly interact with Followthrough.
				// EDIT: Followthrough has been cut, but I kept this logic here cuz one way or another the effect needs to be removed
				`AMLOG("Removing Chasing Shot Effect");
				History = `XCOMHISTORY;
				NewGameState = class'XComGameStateContext_ChangeContainer'.static.CreateChangeState("Remove Chase effect");
				foreach History.IterateByClassType(class'XComGameState_Effect', EffectState)
				{
					if (EffectState.GetX2Effect().EffectName == 'IRI_BH_ChasingShot_Effect' && EffectState.ApplyEffectParameters.SourceStateObjectRef.ObjectID == ChasingShotState.OwnerStateObject.ObjectID)
					{
						EffectState.RemoveEffect(NewGameState, NewGameState, true);
						break;
					}
				}

				

				`GAMERULES.SubmitGameState(NewGameState);
			}
			// Reset cooldown if Chase Shot failed to activate
			// -> but the effect remains on target, you can try again.
			//else
			//{
			//	AbilityRef = UnitState.FindAbility('IRI_BH_ChasingShot', ChasingShotState.SourceWeapon);
			//	AbilityState = XComGameState_Ability(`XCOMHISTORY.GetGameStateForObjectID(AbilityRef.ObjectID));
			//	if (AbilityState != none)
			//	{
			//		NewGameState = class'XComGameStateContext_ChangeContainer'.static.CreateChangeState("Reset Chase Cooldown");
			//		AbilityState = XComGameState_Ability(NewGameState.ModifyStateObject(AbilityState.Class, AbilityState.ObjectID));
			//		AbilityState.iCooldown = 0;
			//		`GAMERULES.SubmitGameState(NewGameState);
			//	}
			//}
		}
	}	

	return ELR_NoInterrupt;
}

static private function X2AbilityTemplate IRI_BH_Blindside()
{
	local X2AbilityTemplate                 Template;	
	local X2Effect_ApplyWeaponDamage        WeaponDamageEffect;
	local X2Effect_Knockback				KnockbackEffect;
	local X2AbilityCost_Ammo				AmmoCost;

	// Macro to do localisation and stuffs
	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_Blindside');

	// Icon Setup
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_standardpistol";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	// Targeting and Triggering
	Template.DisplayTargetHitChance = true;
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.TargetingMethod = class'X2TargetingMethod_OverTheShoulder';
	Template.AbilityToHitCalc = default.SimpleStandardAim;
	Template.AbilityToHitOwnerOnMissCalc = default.SimpleStandardAim;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter Conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// Target Conditions
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	Template.AbilityTargetConditions.AddItem(default.UnitDoesNotSeeCondition);
	Template.AbilityTargetConditions.AddItem(default.LivingHostileTargetProperty);
	
	// Costs
	Template.AbilityCosts.AddItem(default.FreeActionCost);	
	AddCooldown(Template, `GetConfigInt('IRI_BH_Blindside_Cooldown'));

	// Ammo
	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);
	Template.bUseAmmoAsChargesForHUD = true;

	// Effects
	WeaponDamageEffect = new class'X2Effect_ApplyWeaponDamage';
	WeaponDamageEffect.bIgnoreArmor = true;
	Template.AddTargetEffect(WeaponDamageEffect);

	KnockbackEffect = new class'X2Effect_Knockback';
	KnockbackEffect.KnockbackDistance = 2;
	Template.AddTargetEffect(KnockbackEffect);

	Template.bAllowAmmoEffects = true;
	Template.bAllowBonusWeaponEffects = true;
	Template.bAllowFreeFireWeaponUpgrade = true;

	// State and Viz
	Template.bUsesFiringCamera = true;
	Template.CinescriptCameraType = "StandardGunFiring";
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;	
	Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	Template.bFrameEvenWhenUnitIsHidden = true;

	return Template;	
}

static private function X2AbilityTemplate IRI_BH_Folowthrough()
{
	local X2AbilityTemplate						Template;	
	local X2Effect_BountyHunter_Folowthrough	Folowthrough;

	// Macro to do localisation and stuffs
	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_Folowthrough');

	// Icon Setup
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_standardpistol";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	// Targeting and Triggering
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter Conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();
	
	// Costs
	Template.AbilityCosts.AddItem(default.FreeActionCost);	
	AddCooldown(Template, `GetConfigInt('IRI_BH_Folowthrough_Cooldown'));

	// Effects
	Folowthrough = new class'X2Effect_BountyHunter_Folowthrough';
	Folowthrough.BuildPersistentEffect(1, false, false, false, eGameRule_PlayerTurnBegin);
	Folowthrough.SetDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName);
	Template.AddTargetEffect(Folowthrough);

	// State and Viz
	Template.AbilityConfirmSound = "TacticalUI_Activate_Ability_Run_N_Gun";
	Template.bSkipFireAction = true;
	Template.bShowActivation = true;
	Template.ConcealmentRule = eConceal_Always;
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;	
	//Template.BuildInterruptGameStateFn = TypicalAbility_BuildInterruptGameState;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	Template.bFrameEvenWhenUnitIsHidden = true;

	return Template;	
}


static private function X2AbilityTemplate IRI_BH_BigGameHunter_Alt()
{
	local X2AbilityTemplate		Template;	
	local X2AbilityCost_Ammo	AmmoCost;

	Template = class'X2Ability_WeaponCommon'.static.Add_StandardShot('IRI_BH_BigGameHunter_Alt', true, false, false);
	SetHidden(Template);
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.AbilityTriggers.Length = 0;
	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_Placeholder');
	
	// Need just the ammo cost.
	Template.AbilityCosts.Length = 0;
	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	Template.bShowActivation = true;

	return Template;	
}

static private function X2AbilityTemplate IRI_BH_BigGameHunter_Alt_Passive()
{
	local X2AbilityTemplate Template;	
	local X2Effect_BountyHunter_BigGameHunter Effect;
	local X2Effect_Persistent PersistentEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_BigGameHunter_Alt_Passive');

	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_shadowstrike";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	SetPassive(Template);

	Effect = new class'X2Effect_BountyHunter_BigGameHunter';
	Effect.BuildPersistentEffect(1, true);
	Effect.SetDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName);
	Template.AddTargetEffect(Effect);

	PersistentEffect = new class'X2Effect_Persistent';
	PersistentEffect.BuildPersistentEffect(1, true);
	PersistentEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage, true,,Template.AbilitySourceName);
	Template.AddTargetEffect(PersistentEffect);

	Template.AdditionalAbilities.AddItem('IRI_BH_BigGameHunter_Alt');

	return Template;	
}


// This ability is a bit complicated. Desired function:
// You Suppress the target and force it to move, immediately triggering an attack against it.
// The suppression effect should remain on target, allowing further reaction attacks until the target dies, 
// moves out of LoS, or shooter runs out of ammo.
// 
// Here's how this is achieved:
// IRI_BH_Terminate applies the initial suppression effect and forces the target to run. 
// It also applies a unit value which will be used later to make sure that later we retrigger suppression only against this particular target.
// This suppression effect registers for ability activation event, and triggers the IRI_BH_Terminate_Attack,
// which records the Event Chain Start History Index as a unit value on the target and removes the suppression effect from the target.
// If the target is not moving, we resuppress it right away by triggering the IRI_BH_Terminate_Resuppress in that same listener.
// If the target is moving, then we don't do anything.
// The IRI_BH_Terminate_Resuppress has its own event listener trigger, but it will activate only against a unit that activates an ability
// whose Event Chain Start History Index is not the one that we already recoreded on the suppressed unit as a unit value.
// This ensures the event chain fully resolves before we are able to resuppress the target.
// This convoluted process is required mainly to address various issues that occur when the same suppression effect is used for multiple suppression shots on the same moving target:
// 1. After the unit moves, the suppressing unit continues suppressing the unit's original location. 
// This can be addressed by updating the m_SuppressionHistoryIndex on the suppressing unit state.
// 2. Even if the previous issue is addressed, the suppressing unit will still face the target's original location with their lower body, 
// turning only arms and upper torso as much as possible to aim at the new location.
// This can be addressed via custom Build Vis function for the suppression shot which will add X2Action_MoveTurn after the suppression shot goes through.
// 3. Even if previous issues are addressed, the following suppression cosmetic shots will visually hit the target dead center, producing blood splatter, but not hurting the target,
// as the shots are just for the show.
// I couldn't figure out any way to address this other than removing and reapplying the suppression effect from the target after each shot.
// The ressuppressing needs to be handled by a separate ability and not the suppression shot itself to prevent inception.

static private function X2AbilityTemplate IRI_BH_Terminate()
{
	local X2AbilityTemplate                 Template;	
	local X2AbilityCost_Ammo                AmmoCost;
	local X2AbilityCost_ActionPoints        ActionPointCost;
	local X2Effect_BountyHunter_RoutingVolley	SuppressionEffect;
	local X2Effect_AutoRunBehaviorTree		RunTree;
	local X2Effect_GrantActionPoints		GrantActionPoints;
	local X2Effect_SetUnitValue				UnitValueEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_Terminate');

	// Icon Setup
	Template.IconImage = "img:///IRIPerkPackUI.UIPerk_Terminate";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	// Targeting and Triggering
	Template.AbilityToHitCalc = default.DeadEye;	
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);
	Template.TargetingMethod = class'X2TargetingMethod_OverTheShoulder';

	// Shooter Conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// Target Conditions
	Template.AbilityTargetConditions.AddItem(default.LivingHostileUnitDisallowMindControlProperty);
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityAllowSquadsight);

	// Costs
	AmmoCost = new class'X2AbilityCost_Ammo';	
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);
	
	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.bConsumeAllPoints = true;
	ActionPointCost.iNumPoints = 1;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AddCharges(Template, `GetConfigInt('IRI_BH_Terminate_Charges'));

	// Effects
	UnitValueEffect = new class'X2Effect_SetUnitValue';
	UnitValueEffect.UnitName = 'IRI_BH_Terminate_UnitValue_SuppressTarget';
	UnitValueEffect.NewValueToSet = 1.0f;
	UnitValueEffect.CleanupType = eCleanup_BeginTurn;
	Template.AddTargetEffect(UnitValueEffect);

	Template.bIsASuppressionEffect = true;
	SuppressionEffect = new class'X2Effect_BountyHunter_RoutingVolley';
	SuppressionEffect.BuildPersistentEffect(1, false, true, false, eGameRule_PlayerTurnBegin);
	SuppressionEffect.bRemoveWhenTargetDies = true;
	SuppressionEffect.bRemoveWhenSourceDamaged = true;
	//SuppressionEffect.bBringRemoveVisualizationForward = true;
	SuppressionEffect.SetDisplayInfo(ePerkBuff_Penalty, Template.LocFriendlyName, class'X2Ability_GrenadierAbilitySet'.default.SuppressionTargetEffectDesc, Template.IconImage,,,Template.AbilitySourceName);
	SuppressionEffect.SetSourceDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, class'X2Ability_GrenadierAbilitySet'.default.SuppressionSourceEffectDesc, Template.IconImage);
	Template.AddTargetEffect(SuppressionEffect);
	Template.AddTargetEffect(class'X2Ability_GrenadierAbilitySet'.static.HoloTargetEffect());

	GrantActionPoints = new class'X2Effect_GrantActionPoints';
	GrantActionPoints.NumActionPoints = 1;
	GrantActionPoints.PointType = class'X2CharacterTemplateManager'.default.StandardActionPoint;
	Template.AddTargetEffect(GrantActionPoints);

	RunTree = new class'X2Effect_AutoRunBehaviorTree';
	RunTree.BehaviorTree = 'IRI_PP_FlushRoot';
	Template.AddTargetEffect(RunTree);

	// State and Viz
	//Template.ActivationSpeech = 'Banish';
	//Template.ActivationSpeech = 'DeadEye'; // Use a voiceline available to regular soldiers. 
											 // ->This ability plays a Suppressing voiceline automatically somewhere down the line.
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";
	Template.Hostility = eHostility_Offensive;
	Template.CinescriptCameraType = "StandardSuppression";
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = class'BountyHunter'.static.SuppressionBuildVisualization;
	Template.BuildAppliedVisualizationSyncFn = class'BountyHunter'.static.SuppressionBuildVisualizationSync;

	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.AssociatedPassives.AddItem('HoloTargeting');
	Template.AdditionalAbilities.AddItem('IRI_BH_Terminate_Attack');
	Template.AdditionalAbilities.AddItem('IRI_BH_Terminate_Resuppress');

	return Template;	
}

static private function X2AbilityTemplate IRI_BH_Terminate_Attack()
{
	local X2AbilityTemplate						Template;	
	local X2AbilityCost_Ammo					AmmoCost;
	local X2Effect_RemoveEffects_MatchSource	RemoveSuppression;

	Template = class'X2Ability_WeaponCommon'.static.Add_StandardShot('IRI_BH_Terminate_Attack', true, false, false);
	SetHidden(Template);

	Template.IconImage = "img:///IRIPerkPackUI.UIPerk_Terminate";
	Template.AbilitySourceName = 'eAbilitySource_Perk';

	Template.AbilityTriggers.Length = 0;
	Template.AbilityTriggers.AddItem(new class'X2AbilityTrigger_Placeholder');

	RemoveSuppression = new class'X2Effect_RemoveEffects_MatchSource';
	RemoveSuppression.EffectNamesToRemove.AddItem(class'X2Effect_BountyHunter_RoutingVolley'.default.EffectName);
	Template.AddTargetEffect(RemoveSuppression);
	
	// Need just the ammo cost.
	Template.AbilityCosts.Length = 0;
	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	Template.bShowActivation = true;

	//don't want to exit cover, we are already in suppression/alert mode.
	Template.bSkipExitCoverWhenFiring = true;

	// Placebo, actual firing animation is set by Template Master in BountyHunter\XComTemplateEditor.ini
	SetFireAnim(Template, 'FF_FireSuppress');

	return Template;	
}

static private function X2AbilityTemplate IRI_BH_Terminate_Resuppress()
{
	local X2AbilityTemplate						Template;	
	local X2Effect_BountyHunter_RoutingVolley	SuppressionEffect;
	local X2AbilityTrigger_EventListener		Trigger;
	local X2AbilityCost_Ammo					AmmoCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'IRI_BH_Terminate_Resuppress');

	// Icon Setup
	Template.IconImage = "img:///IRIPerkPackUI.UIPerk_Terminate";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	SetHidden(Template);

	// Targeting and Triggering
	Template.AbilityToHitCalc = default.DeadEye;	
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.TargetingMethod = class'X2TargetingMethod_OverTheShoulder';

	Trigger = new class'X2AbilityTrigger_EventListener';	
	Trigger.ListenerData.EventID = 'AbilityActivated';
	Trigger.ListenerData.Deferral = ELD_OnStateSubmitted;
	Trigger.ListenerData.Filter = eFilter_None;
	Trigger.ListenerData.Priority = 40;
	Trigger.ListenerData.EventFn = TerminateTriggerListener_Resuppress;
	Template.AbilityTriggers.AddItem(Trigger);

	// Shooter Conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	// Costs
	AmmoCost = new class'X2AbilityCost_Ammo';	
	AmmoCost.iAmmo = 1;
	AmmoCost.bFreeCost = true; // Check ammo for activation only.
	Template.AbilityCosts.AddItem(AmmoCost);

	// Target Conditions
	Template.AbilityTargetConditions.AddItem(default.LivingHostileUnitDisallowMindControlProperty);
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityAllowSquadsight);

	// Effects
	Template.bIsASuppressionEffect = true;
	SuppressionEffect = new class'X2Effect_BountyHunter_RoutingVolley';
	SuppressionEffect.BuildPersistentEffect(1, false, true, false, eGameRule_PlayerTurnBegin);
	SuppressionEffect.bRemoveWhenTargetDies = true;
	SuppressionEffect.bRemoveWhenSourceDamaged = true;
	SuppressionEffect.bBringRemoveVisualizationForward = true;
	SuppressionEffect.SetDisplayInfo(ePerkBuff_Penalty, Template.LocFriendlyName, class'X2Ability_GrenadierAbilitySet'.default.SuppressionTargetEffectDesc, Template.IconImage,,,Template.AbilitySourceName);
	SuppressionEffect.SetSourceDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, class'X2Ability_GrenadierAbilitySet'.default.SuppressionSourceEffectDesc, Template.IconImage);
	Template.AddTargetEffect(SuppressionEffect);

	// State and Viz
	Template.Hostility = eHostility_Offensive;
	//Template.CinescriptCameraType = "StandardSuppression";
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = class'BountyHunter'.static.SuppressionBuildVisualization;
	Template.BuildAppliedVisualizationSyncFn = class'BountyHunter'.static.SuppressionBuildVisualizationSync;

	Template.AssociatedPlayTiming = SPT_AfterSequential;
	Template.SuperConcealmentLoss = class'X2AbilityTemplateManager'.default.SuperConcealmentStandardShotLoss;
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotChosenActivationIncreasePerUse;
	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.StandardShotLostSpawnIncreasePerUse;
	Template.bFrameEvenWhenUnitIsHidden = true;

	return Template;	
}

static private function EventListenerReturn TerminateTriggerListener_Resuppress(Object EventData, Object EventSource, XComGameState GameState, Name Event, Object CallbackData)
{
	local XComGameState_Ability			AbilityState;
	local XComGameStateContext_Ability	AbilityContext;
	local XComGameState_Unit			TargetUnit;
	local XComGameStateHistory			History;
	local UnitValue						UV;

	// Process only abilities that involve movement.
	AbilityContext = XComGameStateContext_Ability(GameState.GetContext());
	if (AbilityContext == none || AbilityContext.InterruptionStatus == eInterruptionStatus_Interrupt || AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length == 0)
		return ELR_NoInterrupt;

	AbilityState = XComGameState_Ability(EventData);
	if (AbilityState == none || !AbilityState.IsAbilityInputTriggered())
		return ELR_NoInterrupt;

	TargetUnit = XComGameState_Unit(EventSource);
	if (TargetUnit == none)
		return ELR_NoInterrupt;

	// Use this value to filter out ability activations from units that we didn't manually suppress previously.
	if (!TargetUnit.GetUnitValue('IRI_BH_Terminate_UnitValue_SuppressTarget', UV))
		return ELR_NoInterrupt;

	`AMLOG("Attempting trigger resuppress by ability:" @ AbilityContext.InputContext.AbilityTemplateName);

	History = `XCOMHISTORY;
	TargetUnit.GetUnitValue('IRI_BH_Terminate_UnitValue', UV);
	if (UV.fValue != History.GetEventChainStartIndex())
	{
		`AMLOG("Terminate has not yet responded to this event chain start, exiting.");
		return ELR_NoInterrupt;
	}

	if (AbilityContext.InputContext.MovementPaths[0].MovementTiles[AbilityContext.InputContext.MovementPaths[0].MovementTiles.Length - 1] != TargetUnit.TileLocation)
	{
		`AMLOG("Unit is not yet on final tile of movement, exiting");
		return ELR_NoInterrupt;
	}

	AbilityState = XComGameState_Ability(CallbackData);
	if (AbilityState == none)
		return ELR_NoInterrupt;

	`AMLOG("Attempting resuppress");

	if (AbilityState.AbilityTriggerAgainstSingleTarget(TargetUnit.GetReference(), false))
	{
		`AMLOG("resuppress succeess");
	}

	return ELR_NoInterrupt;
}
